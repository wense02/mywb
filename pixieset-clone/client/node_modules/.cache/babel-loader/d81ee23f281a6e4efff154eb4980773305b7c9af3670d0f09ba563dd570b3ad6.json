{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\oshea\\\\Desktop\\\\mywb\\\\pixieset-clone\\\\client\\\\src\\\\contexts\\\\ThemeContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/contexts/ThemeContext.js\nimport React, { createContext, useState, useEffect, useContext, useMemo } from 'react';\nimport { ThemeProvider as MuiThemeProvider } from '@mui/material/styles'; // Import MUI ThemeProvider\nimport { lightTheme, darkTheme } from '../theme'; // Import your MUI themes\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeContext = /*#__PURE__*/createContext();\nexport const ThemeProvider = ({\n  children\n}) => {\n  _s();\n  const [mode, setMode] = useState(() => {\n    // Initialize mode from localStorage or default to 'light'\n    return localStorage.getItem('themeMode') || 'light';\n  });\n\n  // Memoize the MUI theme object to prevent unnecessary re-renders\n  const muiTheme = useMemo(() => mode === 'light' ? lightTheme : darkTheme, [mode]);\n  useEffect(() => {\n    // Save theme mode to localStorage whenever it changes\n    localStorage.setItem('themeMode', mode);\n    // Optionally, set a data-theme attribute on body for non-MUI elements or global CSS\n    document.body.setAttribute('data-theme', mode);\n  }, [mode]);\n  const toggleTheme = () => {\n    setMode(prevMode => prevMode === 'light' ? 'dark' : 'light');\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      mode,\n      toggleTheme\n    },\n    children: /*#__PURE__*/_jsxDEV(MuiThemeProvider, {\n      theme: muiTheme,\n      children: [\" \", children]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n_s(ThemeProvider, \"loXUByrbhHG2RLaHLBQhk0PZJTQ=\");\n_c = ThemeProvider;\nexport const useTheme = () => {\n  _s2();\n  return useContext(ThemeContext);\n};\n_s2(useTheme, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","useMemo","ThemeProvider","MuiThemeProvider","lightTheme","darkTheme","jsxDEV","_jsxDEV","ThemeContext","children","_s","mode","setMode","localStorage","getItem","muiTheme","setItem","document","body","setAttribute","toggleTheme","prevMode","Provider","value","theme","fileName","_jsxFileName","lineNumber","columnNumber","_c","useTheme","_s2","$RefreshReg$"],"sources":["C:/Users/oshea/Desktop/mywb/pixieset-clone/client/src/contexts/ThemeContext.js"],"sourcesContent":["// src/contexts/ThemeContext.js\r\nimport React, { createContext, useState, useEffect, useContext, useMemo } from 'react';\r\nimport { ThemeProvider as MuiThemeProvider } from '@mui/material/styles'; // Import MUI ThemeProvider\r\nimport { lightTheme, darkTheme } from '../theme'; // Import your MUI themes\r\n\r\nconst ThemeContext = createContext();\r\n\r\nexport const ThemeProvider = ({ children }) => {\r\n  const [mode, setMode] = useState(() => {\r\n    // Initialize mode from localStorage or default to 'light'\r\n    return localStorage.getItem('themeMode') || 'light';\r\n  });\r\n\r\n  // Memoize the MUI theme object to prevent unnecessary re-renders\r\n  const muiTheme = useMemo(() => (mode === 'light' ? lightTheme : darkTheme), [mode]);\r\n\r\n  useEffect(() => {\r\n    // Save theme mode to localStorage whenever it changes\r\n    localStorage.setItem('themeMode', mode);\r\n    // Optionally, set a data-theme attribute on body for non-MUI elements or global CSS\r\n    document.body.setAttribute('data-theme', mode);\r\n  }, [mode]);\r\n\r\n  const toggleTheme = () => {\r\n    setMode((prevMode) => (prevMode === 'light' ? 'dark' : 'light'));\r\n  };\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ mode, toggleTheme }}>\r\n      <MuiThemeProvider theme={muiTheme}> {/* Wrap children with MUI ThemeProvider */}\r\n        {children}\r\n      </MuiThemeProvider>\r\n    </ThemeContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useTheme = () => {\r\n  return useContext(ThemeContext);\r\n};"],"mappings":";;;AAAA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,UAAU,EAAEC,OAAO,QAAQ,OAAO;AACtF,SAASC,aAAa,IAAIC,gBAAgB,QAAQ,sBAAsB,CAAC,CAAC;AAC1E,SAASC,UAAU,EAAEC,SAAS,QAAQ,UAAU,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAElD,MAAMC,YAAY,gBAAGX,aAAa,CAAC,CAAC;AAEpC,OAAO,MAAMK,aAAa,GAAGA,CAAC;EAAEO;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC7C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGd,QAAQ,CAAC,MAAM;IACrC;IACA,OAAOe,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,IAAI,OAAO;EACrD,CAAC,CAAC;;EAEF;EACA,MAAMC,QAAQ,GAAGd,OAAO,CAAC,MAAOU,IAAI,KAAK,OAAO,GAAGP,UAAU,GAAGC,SAAU,EAAE,CAACM,IAAI,CAAC,CAAC;EAEnFZ,SAAS,CAAC,MAAM;IACd;IACAc,YAAY,CAACG,OAAO,CAAC,WAAW,EAAEL,IAAI,CAAC;IACvC;IACAM,QAAQ,CAACC,IAAI,CAACC,YAAY,CAAC,YAAY,EAAER,IAAI,CAAC;EAChD,CAAC,EAAE,CAACA,IAAI,CAAC,CAAC;EAEV,MAAMS,WAAW,GAAGA,CAAA,KAAM;IACxBR,OAAO,CAAES,QAAQ,IAAMA,QAAQ,KAAK,OAAO,GAAG,MAAM,GAAG,OAAQ,CAAC;EAClE,CAAC;EAED,oBACEd,OAAA,CAACC,YAAY,CAACc,QAAQ;IAACC,KAAK,EAAE;MAAEZ,IAAI;MAAES;IAAY,CAAE;IAAAX,QAAA,eAClDF,OAAA,CAACJ,gBAAgB;MAACqB,KAAK,EAAET,QAAS;MAAAN,QAAA,GAAC,GAAC,EACjCA,QAAQ;IAAA;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACO;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAE5B,CAAC;AAAClB,EAAA,CA3BWR,aAAa;AAAA2B,EAAA,GAAb3B,aAAa;AA6B1B,OAAO,MAAM4B,QAAQ,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC5B,OAAO/B,UAAU,CAACQ,YAAY,CAAC;AACjC,CAAC;AAACuB,GAAA,CAFWD,QAAQ;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}